emmet.io - pogledati njihove komande koje olaksavaju pisanje koda

Sta je react a sta react dom? React je veoma mali sa svega recimo 2kb i on govori kako treba da interaktujemo sa react-om.
React dom je ustvari ona veca biblioteka koja uzima react package i renderuje sve potrebno u dom.
React Native je isto sto i dom, samo sto on funkcionise za android i IOS aplikacije.


Komponenta koju sam napravio, ne moze da postoji sama za sebe osim ako ne iskoristim React DOM da tu komponentu negde renderujem.
Moc react-a je sto ta komponenta moze da sadrzi druge komponente, koje mogu da sadrze druge komponente i tome slicno.

Kreiranje GIT

…or create a new repository on the command line
echo "# React-Adopt-me-app" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/squaloIT/React-Adopt-me-app.git
git push -u origin master
…or push an existing repository from the command line
git remote add origin https://github.com/squaloIT/React-Adopt-me-app.git
git push -u origin master
…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.


Prettier - devDependency 
Tu je kako bi moj kod bio bolji. Odnosno kako bi standardizovao nacin pisanja koda kod mene i kod svih drugih koji rade na projektu.

"format": "prettier \"src/**/*.{js, html}\" --write"
- Ovo sam stavio u package.json, i kada pokrenem ovo sve se ispravi u svakom fajlu u skladu sa pravilima prettier-a.
- Bez --write on bi mi samo u konzoli ispisao sta je uradio, sa ovim upisuje to u fajlove.
- Moraju dupli navodnici!


E sad na ovaj nacin to radi samo kada ga pokrenem kroz cmd, ali mogu da definisem pomocu extenzije Prettier Code Formating da se prilikom svakog Save-a to uradi.
Postavljam to



ESLINT 
instalacija kroz cmd, nakon toga instalacija eslint-config-prettier koji omogucava da eslint pokupi pravila od prettier-a.

Komanda unutar package.json koja pokrece prettier
"lint": "eslint \"src/**/*.{js, jsx}\" --quiet"

Nakon ovoga dodata ekstenzija editoru kako bi prilikom kucanja koda odmah bila pronadjena greska, ne kad pokrenem cmd.



PARCEL

Veoma je pametan, nema konfiguraciju jer sam konta sve stvari i bundeluje fajlove. Webpack mocniji i bolji ali kompleksniji, dok je parcel slabiji ali mnogo mocniji.

npm i -D parcel-bundler

Konfiguracija parcel-a ne postoji, sve sto treba da uradim jeste da unutar package.json-a postavim : 
"dev": "parcel src/index.html" 


PODESAVANJA REACT-A SA ESLINT-om i BABELOM

npm install -D babel-eslint eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react

.eslintrc
{
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:react/recommended",
    "plugin:jsx-a11y/recommended",
    "prettier",
    "prettier/react"
  ],
  "rules": {
    "react/prop-types": 0,
    "no-console": 1
  },
  "plugins": ["react", "import", "jsx-a11y"],
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "env": {
    "es6": true,
    "browser": true,
    "node": true
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}


return (
  <div>
    <h1>
      Neki tekst
    </h1>
  </div>
);
- Ovde zagrade ne rade nista zapravo, smao kazu da ce se kod koji se vraca prostirati na vise linija koda 


- Ono sto moze da se nadje unutar { } jsx-a je ono sto moze da se nadje sa desne strane = bilo kog statement-a
- Moze biti naprimer name + breed ali ne i if izraz


class se ne moze koristiti kao css klasa, jer je to kljucna rec u JS-u. Zato je className.


ESLINT je podrzao react dev team u pisanju odredjenih pravila za hooks, i oni se mogu isntalirati putem npm-a
npm i -D eslint-plugin-react-hooks
  

  Osim toga unutar eslintrc moram definisati i rule koji se zove "react-hooks/rules-of-hooks" i "react-hooks/exhaustive-deps"


CUSTOM hooks

Prave se kao i svaka druga komponenta, jedina razlika je sto unutar sebe koriste useState, i funkcija koja se vraca dobija stanje. Primer useDropdown


Ucitati pet iz @front
Ucitati useEffect iz react

useEffect menja nekoliko lifecycle hooks koje imamo unutar klasa kada radimo sa react.
https://reactjs.org/docs/hooks-effect.html

useEffect se ne izvrsava odmah, nego nakon sto se sve ucita po prvi put. Sve je sadrzaj komponente jer zelimo da korisnik vidi nesto odmah, pa kada stigne odgovor od strane servera to je okej onda cemo ga ucitati.

Kada god radim sa react-om obavezno moram postaviti NODE_ENV=development, a OBAVEZNO PRE PRODUCTION MENJATI U PRODUCTION!
Ovo Parcel radi za mene.

<React.Strict></React.Strict> - je komponenta kojom mogu obmotati celu moju aplikaciju ili barem deo moje aplikacije. Ono sto ona radi jeste da vodi racuna da u tim komponentama koje su obmotanje ovom komponetnom, ne mogu da koristim neke funkcije ili stvari koje React zeli da odbaci ( deprecated ). To je dobro jer necu imati problema kasnije.
- Mogu da definisem da neki stari deo aplikacije ne bude u strict modu, a neki noviji da. 